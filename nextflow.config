/**
 * # Parameters for nf-maccoss-trex
 *
 * A NextFlow pipeline for analyzing data-ind
 */
params {
    /** \group{Input/Output Parameters} */

    /** \type{string} \required
     *  Path to the FASTA file containing the subset of proteins sequences to
     *  search.
     */
    fasta = null

    /** \type{string} \required
     *  The directory containing the mzML or raw files to search
     */
    spectra_dir = null
    
    result_dir = 'results/nf-openmod-dda' /** \type{str} Where results will be saved. */
    report_dir = 'reports/nf-openmod-dda' /** \type{str} Where results will be saved. */
    email = null           /** \type{str} An email to alert on completion. */

    limelight_tags = null
    limelight_upload = false
}

plugins {
    id 'nf-amazon'
}

docker {
    enabled = true
}

/*
 * Set up secrets in the environment. 
 * Need to do it this way because Nextflow doesn't allow the use of secrets when running on AWS Batch
 */
secret_value = env.LIMELIGHT_SUBMIT_UPLOAD_KEY = nextflow.secret.SecretsLoader.instance.load().getSecret("LIMELIGHT_SUBMIT_UPLOAD_KEY")
if(secret_value) {
    env.LIMELIGHT_SUBMIT_UPLOAD_KEY = secret_value.value
}

secret_value = nextflow.secret.SecretsLoader.instance.load().getSecret("PANORAMA_API_KEY")
if(secret_value) {
    env.PANORAMA_API_KEY = secret_value.value
}

aws {

    batch {
        // NOTE: this setting is only required if the AWS CLI tool is installed in a custom AMI
        cliPath = '/usr/local/aws-cli/v2/current/bin/aws'
        logsGroup = '/batch/tei-nextflow-batch'
        maxConnections = 20
        connectionTimeout = 10000
        uploadStorageClass = 'INTELLIGENT_TIERING'
        storageEncryption = 'AES256'
        retryMode = 'standard'
    }

    region = 'us-west-2'
}

// Execution Profiles
profiles {

    /*
     * Params for running pipeline on the local computer (e.g.:
     * your laptop). These can be overridden in the local config file.
     */
    standard {
        process.executor = 'local'

        // limit nextflow to running 1 task at a time
        executor.queueSize = 1

        params.max_memory = '12.GB'
        params.max_cpus = 8
        params.max_time = '240.h'

        // where to cache mzml files after running msconvert
        params.mzml_cache_directory = '/data/mass_spec/nextflow/nf-openmod-dda/mzml_cache'
        params.panorama_cache_directory = '/data/mass_spec/nextflow/panorama/raw_cache'
    }

    aws {
        process.executor = 'awsbatch'
        process.queue = 'nextflow_basic_ec2'

        // params for running pipeline on aws batch
        // These can be overridden in local config file

        // max params allowed for your AWS Batch compute environment
        params.max_memory = '124.GB'
        params.max_cpus = 32
        params.max_time = '240.h'

        // where to cache mzml files after running msconvert
        params.mzml_cache_directory = 's3://mc-tei-rex-nextflow-dda/openmod/mzml_cache'
        params.panorama_cache_directory = 's3://mc-tei-rex-nextflow-dda/panorama_cache'
    }

    slurm {
        process.executor = 'slurm'

        params.max_memory = '12.GB'
        params.max_cpus = 8
        params.max_time = '240.h'

        // where to cache mzml files after running msconvert
        params.mzml_cache_directory = '/data/mass_spec/nextflow/nf-openmod-dda/mzml_cache'
        params.panorama_cache_directory = '/data/mass_spec/nextflow/panorama/raw_cache'
    }

}

// Manifest
manifest {
    name            = 'nf-openmod-dda'
    author          = 'Michael Riffle'
    homePage        = 'https://github.com/mriffle/nf-openmod-dda'
    description     = 'DDA workflows for TEI-REX project'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.report_dir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.report_dir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.report_dir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = false
    file    = "${params.report_dir}/pipeline_dag_${trace_timestamp}.html"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Copied from the nf-core template.
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
